{% extends 'base.html.twig' %}

{% block title %}ChartConfiguration index{% endblock %}

{% block body %}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<div class="accordion">
{% for chartId, chartData in chartData %}

    <h5 style="color:white;">{{ chartData.name }}</h5>
    <canvas id="canvas{{ chartId }}" width="400" height="200"></canvas>
    <script>
        const ctx{{ chartId }} = document.getElementById('canvas{{ chartId }}');
        const configData{{ chartId }} = {{ chartData.data | json_encode | raw }};
        console.log("les données : " + configData{{ chartId }}.values);
        console.log("les dates : " + configData{{ chartId }}.labels);

        // Création de la liste des couleurs en fonction des valeurs
        const colors{{ chartId }} = configData{{ chartId }}.values.map((value, index) => {
                         
                const previousValue = configData{{ chartId }}.values[index - 1];
                if (value > previousValue) {
                    return 'green'; // Si la valeur actuelle est supérieure à la précédente, couleur verte
                } else if (value < previousValue) {
                    return 'red'; // Si la valeur actuelle est inférieure à la précédente, couleur rouge
                } else if (value = previousValue) {
                    return 'orange'; // Si la valeur actuelle est égale à la précédente, couleur orange
                }

        });

        new Chart(ctx{{ chartId }}, {
            type: '{{ chartData.chartType }}',
            data: {
                labels: configData{{ chartId }}.labels,
                datasets: [{
                    label: '{{ chartData.name }}',
                    data: configData{{ chartId }}.values,
                    borderColor: colors{{ chartId }}, // Utilisez la liste de couleurs déterminée précédemment
                    backgroundColor : colors{{ chartId }},
                    borderWidth: 2,
                    fill: false,
                    tension: 0 // Pour éviter l'interpolation des valeurs
                }]
            },
            options: {
                scales: {
                    y: {
                        min: {{ chartData.min }},
                        max: {{ chartData.max }}
                    }
                }
            }
        });
    </script>
{% endfor %}
</div>
{% endblock %}
